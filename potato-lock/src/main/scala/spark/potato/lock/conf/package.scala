package spark.potato.lock

import spark.potato.common.conf.POTATO_PREFIX
import spark.potato.lock.running.ContextRunningLockService

package object conf {
  val POTATO_LOCK_RUNNING_PREFIX: String = POTATO_PREFIX + "lock.running."

  val POTATO_LOCK_RUNNING_TRY_MAX_KEY: String = POTATO_LOCK_RUNNING_PREFIX + "try.max"
  val POTATO_LOCK_RUNNING_TRY_MAX_DEFAULT: Int = 3
  val POTATO_LOCK_RUNNING_TRY_INTERVAL_MS_KEY: String = POTATO_LOCK_RUNNING_PREFIX + "try.interval.ms"
  val POTATO_LOCK_RUNNING_TRY_INTERVAL_MS_DEFAULT: Int = 30000
  val POTATO_LOCK_RUNNING_FORCE_KEY: String = POTATO_LOCK_RUNNING_PREFIX + "force"
  val POTATO_LOCK_RUNNING_FORCE_DEFAULT: Boolean = false
  val POTATO_LOCK_RUNNING_HEARTBEAT_INTERVAL_MS_KEY: String = POTATO_LOCK_RUNNING_PREFIX + "heartbeat.interval.ms"
  val POTATO_LOCK_RUNNING_HEARTBEAT_INTERVAL_MS_DEFAULT: Int = 10000
  val POTATO_LOCK_RUNNING_HEARTBEAT_TIMEOUT_MS_KEY: String = POTATO_LOCK_RUNNING_PREFIX + "heartbeat.timeout.ms"
  val POTATO_LOCK_RUNNING_HEARTBEAT_TIMEOUT_MS_DEFAULT: Int = 90000
  val POTATO_LOCK_RUNNING_TYPE_KEY: String = POTATO_LOCK_RUNNING_PREFIX + "type"
  val POTATO_LOCK_RUNNING_TYPE_DEFAULT: String = "zookeeper"

  val POTATO_LOCK_RUNNING_ZOOKEEPER_PREFIX: String = POTATO_LOCK_RUNNING_PREFIX + "zookeeper."
  val POTATO_LOCK_RUNNING_ZOOKEEPER_QUORUM_KEY: String = POTATO_LOCK_RUNNING_ZOOKEEPER_PREFIX + "quorum"
  val POTATO_LOCK_RUNNING_ZOOKEEPER_PATH_KEY: String = POTATO_LOCK_RUNNING_ZOOKEEPER_PREFIX + "path"
  val POTATO_LOCK_RUNNING_ZOOKEEPER_PATH_DEFAULT: String = "/potato/lock/running"

  val POTATO_LOCK_RUNNING_CONTEXT_SERVICE_NAME:String = "ContextRunningLock"
  val POTATO_LOCK_RUNNING_STREAMING_SERVICE_NAME:String = "StreamingRunningLock"
}
